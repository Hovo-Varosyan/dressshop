import {
  createStore,
  reconcile
} from "./chunk-LEE25LU7.js";
import {
  createSignal,
  onCleanup
} from "./chunk-YTTI4VPK.js";
import "./chunk-NEUEIHIY.js";

// node_modules/zustand/esm/vanilla.mjs
var createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const getInitialState = () => initialState;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const api = { setState, getState, getInitialState, subscribe };
  const initialState = state = createState(setState, getState, api);
  return api;
};
var createStore2 = ((createState) => createState ? createStoreImpl(createState) : createStoreImpl);

// node_modules/solid-zustand/dist/dev.js
function useStore(api, selector = api.getState, equalityFn) {
  const initialValue = selector(api.getState());
  if (typeof initialValue === "function")
    return initialValue;
  const options = {};
  if (equalityFn)
    options.equals = equalityFn;
  const [signal, setSignal] = createSignal(initialValue, options);
  const unsubscribe = api.subscribe((payload) => {
    const nextStateSlice = selector(payload);
    setSignal(nextStateSlice);
  });
  onCleanup(() => unsubscribe());
  return signal;
}
function createImpl(createState) {
  const api = typeof createState === "function" ? createStore2(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
}
var create = (createState) => createState ? createImpl(createState) : createImpl;
var createWithSignal_default = create;
function useStore2(api, selector = api.getState, equalityFn) {
  const initialValue = selector(api.getState());
  const [state, setState] = createStore(initialValue);
  const listener = (nextState, previousState) => {
    const prevStateSlice = selector(previousState);
    const nextStateSlice = selector(nextState);
    if (equalityFn !== void 0) {
      if (!equalityFn(prevStateSlice, nextStateSlice))
        setState(reconcile(nextStateSlice));
    } else {
      setState(reconcile(nextStateSlice));
    }
  };
  const unsubscribe = api.subscribe(listener);
  onCleanup(() => unsubscribe());
  return state;
}
function createImpl2(createState) {
  const api = typeof createState === "function" ? createStore2(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore2(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
}
var create2 = (createState) => createState ? createImpl2(createState) : createImpl2;
var createWithStore_default = create2;
var create3 = createWithStore_default;
var src_default = create3;
export {
  createWithSignal_default as createWithSignal,
  createWithStore_default as createWithStore,
  src_default as default
};
//# sourceMappingURL=solid-zustand.js.map
