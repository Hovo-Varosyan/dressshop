import { formatDateTime, formatNumber } from './format';
import { render } from './render';
import { parser } from './parser';
import { getPreset, isString } from './utils';
export function createI18n(options) {
    const subscribers = new Set();
    function onUpdate() {
        [...subscribers.values()].forEach(func => func());
    }
    const i18n = {
        language: options.language,
        locales: Object.assign({}, options.locales),
        presets: Object.assign({}, options.presets),
        setLanguage: (value) => {
            i18n.language = value;
            onUpdate();
        },
        setLocales: (value) => {
            i18n.locales = Object.assign(Object.assign({}, i18n.locales), { [i18n.language]: Object.assign(Object.assign({}, i18n.locales[i18n.language]), value) });
            onUpdate();
        },
        t: (msg, props) => {
            var _a;
            const id = isString(msg) ? undefined : msg.id;
            const message = isString(msg) ? msg : msg.message;
            return render(i18n.language, i18n.presets, parser(((_a = i18n.locales[i18n.language]) === null || _a === void 0 ? void 0 : _a[id || message]) || message), props, options.formatTag);
        },
        formatNumber: (value, options) => {
            const optionsValue = (!options || isString(options))
                ? getPreset(i18n.presets.number, options)
                : options;
            return formatNumber(value, i18n.language, optionsValue);
        },
        formatDateTime: (date, options) => {
            const dateValue = typeof date === 'string' ? new Date(date) : date;
            const optionsValue = (!options || isString(options))
                ? getPreset(i18n.presets.dateTime, options)
                : options;
            return formatDateTime(dateValue, i18n.language, optionsValue);
        },
    };
    function subscribe(callback) {
        subscribers.add(callback);
        return () => {
            subscribers.delete(callback);
        };
    }
    return { i18n, subscribe };
}
