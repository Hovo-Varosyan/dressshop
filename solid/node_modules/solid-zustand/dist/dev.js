import { createSignal, onCleanup } from 'solid-js';
import { createStore } from 'zustand/vanilla';
import { createStore as createStore$1, reconcile } from 'solid-js/store';

// src/createWithSignal.ts
function useStore(api, selector = api.getState, equalityFn) {
  const initialValue = selector(api.getState());
  if (typeof initialValue === "function")
    return initialValue;
  const options = {};
  if (equalityFn)
    options.equals = equalityFn;
  const [signal, setSignal] = createSignal(initialValue, options);
  const unsubscribe = api.subscribe((payload) => {
    const nextStateSlice = selector(payload);
    setSignal(nextStateSlice);
  });
  onCleanup(() => unsubscribe());
  return signal;
}
function createImpl(createState) {
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
}
var create = (createState) => createState ? createImpl(createState) : createImpl;
var createWithSignal_default = create;
function useStore2(api, selector = api.getState, equalityFn) {
  const initialValue = selector(api.getState());
  const [state, setState] = createStore$1(initialValue);
  const listener = (nextState, previousState) => {
    const prevStateSlice = selector(previousState);
    const nextStateSlice = selector(nextState);
    if (equalityFn !== void 0) {
      if (!equalityFn(prevStateSlice, nextStateSlice))
        setState(reconcile(nextStateSlice));
    } else {
      setState(reconcile(nextStateSlice));
    }
  };
  const unsubscribe = api.subscribe(listener);
  onCleanup(() => unsubscribe());
  return state;
}
function createImpl2(createState) {
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useBoundStore = (selector, equalityFn) => useStore2(api, selector, equalityFn);
  Object.assign(useBoundStore, api);
  return useBoundStore;
}
var create2 = (createState) => createState ? createImpl2(createState) : createImpl2;
var createWithStore_default = create2;

// src/index.ts
var create3 = createWithStore_default;
var src_default = create3;

export { createWithSignal_default as createWithSignal, createWithStore_default as createWithStore, src_default as default };
