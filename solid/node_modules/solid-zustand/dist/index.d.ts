import { Accessor } from 'solid-js';
import { StoreMutatorIdentifier, StateCreator, Mutate, StoreApi } from 'zustand/vanilla';

type ExtractState<S> = S extends {
    getState: () => infer T;
} ? T : never;
type IsFunction<T> = T extends (...args: any[]) => any ? T : never;
type UseBoundStore<S extends StoreApi<unknown>, P extends 'store' | 'signal'> = {
    (): P extends 'store' ? ExtractState<S> : ExtractState<S> extends IsFunction<ExtractState<S>> ? ExtractState<S> : Accessor<ExtractState<S>>;
    <U>(selector: (state: ExtractState<S>) => U, equals?: (a: U, b: U) => boolean): P extends 'store' ? U : U extends IsFunction<U> ? U : Accessor<U>;
} & S;
interface Create<P extends 'store' | 'signal'> {
    <T extends object, Mos extends [StoreMutatorIdentifier, unknown][] = []>(initializer: StateCreator<T, [], Mos>): UseBoundStore<Mutate<StoreApi<T>, Mos>, P>;
    <T extends object>(): <Mos extends [StoreMutatorIdentifier, unknown][] = []>(initializer: StateCreator<T, [], Mos>) => UseBoundStore<Mutate<StoreApi<T>, Mos>, P>;
    <S extends StoreApi<unknown>>(store: S): UseBoundStore<S, P>;
}

declare const create$2: Create<"signal">;

declare const create$1: Create<"store">;

declare const create: Create<"store">;

export { create$2 as createWithSignal, create$1 as createWithStore, create as default };
