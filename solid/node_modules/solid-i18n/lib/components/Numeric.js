import { template as _$template } from "solid-js/web";
import { className as _$className } from "solid-js/web";
import { effect as _$effect } from "solid-js/web";
import { insert as _$insert } from "solid-js/web";
const _tmpl$ = /*#__PURE__*/_$template(`<span>`);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { splitProps, mergeProps } from 'solid-js';
import { isEmpty } from 'i18n-mini/lib/utils';
import { useI18n } from '../context';
export function Numeric(props) {
  var i18n = useI18n();
  var _splitProps = splitProps(props, ['value', 'preset', 'numberStyle', 'class']),
    _splitProps2 = _slicedToArray(_splitProps, 2),
    local = _splitProps2[0],
    other = _splitProps2[1];
  var options = mergeProps(other, {
    style: local.numberStyle
  });
  return (() => {
    var _el$ = _tmpl$();
    _$insert(_el$, () => {
      var _i18n$presets$number;
      return i18n.formatNumber(local.value, !isEmpty(options) ? options : (_i18n$presets$number = i18n.presets.number) === null || _i18n$presets$number === void 0 ? void 0 : _i18n$presets$number[local.preset || 'default']);
    });
    _$effect(() => _$className(_el$, local.class));
    return _el$;
  })();
}